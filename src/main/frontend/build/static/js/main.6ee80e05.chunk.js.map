{"version":3,"sources":["logo.svg","components/Homepage/Homepage.js","components/NavBar/NavBar.js","components/AboutMe/AboutMe.js","components/Projects/Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","className","defaultProps","NavBar","useState","value","setValue","useEffect","path","window","location","pathname","AppBar","style","background","position","Toolbar","Tabs","onChange","event","newValue","Tab","label","component","Link","to","Typography","marginLeft","fontSize","variant","AboutMe","padding","color","Paper","borderColor","borderWidth","textAlign","Divider","href","Projects","theme","createMuiTheme","palette","primary","main","secondary","paper","default","text","divider","overrides","MuiDivider","root","marginTop","marginBottom","App","CssBaseline","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ee80e05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Homepage.css';\r\n\r\nconst Homepage = () => (\r\n  <div className=\"Homepage\">\r\n    <b>HOMEPAGE</b>\r\n  </div>\r\n);\r\n\r\nHomepage.propTypes = {};\r\n\r\nHomepage.defaultProps = {};\r\n\r\nexport default Homepage;\r\n","import React, {useEffect, useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './NavBar.css';\r\nimport {AppBar, Toolbar, Typography} from \"@material-ui/core\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport {BrowserRouter, Link, Route, Switch, withRouter} from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n    // When the URL is changed, but via tab selection, and not page reload, then update highlighted tab\r\n    const [value, setValue] = useState(0);\r\n    const handlePageChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    useEffect(() => {\r\n        // Current URL\r\n        let path = window.location.pathname;\r\n        if (path === \"/\" && value !== \"/\") {\r\n            setValue(\"/\");\r\n        }\r\n        else if (path === \"/about\" && value !== \"/about\") {\r\n            setValue(\"/about\");\r\n        }\r\n        else if (path === \"/projects\" && value !== \"/projects\") {\r\n            setValue(\"/projects\");\r\n        }\r\n    }, [value,]);\r\n\r\n    // Content\r\n    return(\r\n  <div className=\"NavBar\">\r\n      <AppBar style={{background: \"#363636\"}} position={\"fixed\"}>\r\n          <Toolbar>\r\n              <Tabs value={window.location.pathname} onChange={handlePageChange}>\r\n                  <Tab label={\"Home\"} value={\"/\"} component={Link} to={\"/\"}/>\r\n                  <Tab label={\"About Me\"} value={\"/about\"} component={Link} to={\"/about\"}/>\r\n                  <Tab label={\"Projects\"} value={\"/projects\"} component={Link} to={\"/projects\"}/>\r\n              </Tabs>\r\n              <Typography style={{marginLeft: \"auto\", fontSize: 1.1 + \"em\"}} variant={\"subtitle2\"}>\r\n                  Jason James\r\n              </Typography>\r\n          </Toolbar>\r\n      </AppBar>\r\n  </div>\r\n)};\r\n\r\nNavBar.propTypes = {};\r\n\r\nNavBar.defaultProps = {};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './AboutMe.css';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nconst AboutMe = () => (\r\n  <div className=\"AboutMe\">\r\n      <Typography style={{padding: 1 + \"em\"}} color={\"secondary\"} variant={\"h3\"}>\r\n          ABOUT ME\r\n      </Typography>\r\n      <div className={ \"mid-content\" }>\r\n          <Paper className={ \"about-paper\"} style={{\r\n              borderColor: \"#CCA43B\", borderWidth: 0.40 + \"em\", padding: 5 + \"em\"}}\r\n                 variant={\"outlined\"}>\r\n\r\n              <Typography variant={\"h6\"}>\r\n                  A Brief History & Introduction\r\n              </Typography>\r\n              <Typography style={{textAlign: \"left\"}} variant={\"body1\"}>\r\n                  Hello, my name is Jason James, and welcome to my website! I am a 24-year-old college student and soon-to-be\r\n                  college graduate, who is seeking employment in Software Engineering. I have lived in Cobb County, GA throughout my\r\n                  entire life. My hobbies consist of programming, video games, and running (mostly when the weather is nice!). I started\r\n                  programming some time back in early high school by developing mods and server plugins (Java) for the video game,\r\n                  “Minecraft”, for my friends and I to enjoy. Programming has always excited me ever since as it allows for so many\r\n                  challenging problems and puzzles to solve. I am currently seeking a career in Web Development as either a Full Stack,\r\n                  Frontend, or Backend Engineer.\r\n              </Typography>\r\n\r\n              <Divider variant={\"middle\"}/>\r\n\r\n              <Typography variant={\"h6\"}>\r\n                  Education\r\n              </Typography>\r\n              <Typography style={{textAlign: \"left\"}} variant={\"body1\"}>\r\n                  I will be graduating in the Summer of 2020 from Kennesaw State University with a Bachelor of\r\n                  Science Degree in Computer Science. I am also largely self-taught.\r\n              </Typography>\r\n\r\n              <Divider variant={\"middle\"}/>\r\n\r\n              <Typography variant={\"h6\"}>\r\n                  Skills & Past Projects\r\n              </Typography>\r\n              <Typography style={{textAlign: \"left\"}} variant={\"body1\"}>\r\n                  I have experience with programming languages such as Java, Python, JavaScript (and\r\n                  Typescript), SQL, and C++. I have some experience using frontend JavaScript frameworks, such\r\n                  as Angular and React. I have also become familiar with Java EE for backend development. I\r\n                  have successfully worked in a group/team environment for my Senior Project (capstone) at\r\n                  Kennesaw State University, in which we developed a modified variant of chess with AI support,\r\n                  in which we used Git with GitHub. I developed this website with a Java EE backend, MySQL\r\n                  DBMS, and React frontend. For more detailed information on my past projects, please take a\r\n                  look at the “Projects” page/tab.\r\n              </Typography>\r\n\r\n              <Divider variant={\"middle\"}/>\r\n\r\n              <Typography variant={\"h6\"}>\r\n                  Relevant Links & Contact Info\r\n              </Typography>\r\n\r\n              <a href={\"https://www.linkedin.com/in/jason-james-011762146/\"}>\r\n                  <Typography variant={\"body1\"}>LinkedIn Profile</Typography>\r\n              </a>\r\n\r\n              <a href={\"https://github.com/Fulgar\"}>\r\n                  <Typography variant={\"body1\"}>GitHub Profile</Typography>\r\n              </a>\r\n\r\n              <Typography variant={\"body1\"}>Professional Email: jjames541907@gmail.com</Typography>\r\n\r\n              <Typography variant={\"body1\"}>For Phone Contact Please Send Email First</Typography>\r\n\r\n          </Paper>\r\n      </div>\r\n  </div>\r\n);\r\n\r\nAboutMe.propTypes = {};\r\n\r\nAboutMe.defaultProps = {};\r\n\r\nexport default AboutMe;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Projects.css';\r\n\r\nconst Projects = () => (\r\n  <div className=\"Projects\">\r\n      <b>PROJECTS</b>\r\n  </div>\r\n);\r\n\r\nProjects.propTypes = {};\r\n\r\nProjects.defaultProps = {};\r\n\r\nexport default Projects;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Homepage from \"./components/Homepage/Homepage\";\r\nimport NavBar from \"./components/NavBar/NavBar\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport AboutMe from \"./components/AboutMe/AboutMe\";\r\nimport Projects from \"./components/Projects/Projects\";\r\nimport {Button, createMuiTheme, MuiThemeProvider} from '@material-ui/core';\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\nimport { AppBar, Toolbar, Typography } from \"@material-ui/core\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: \"#242F40\"\r\n        },\r\n        secondary: {\r\n            main: \"#CCA43B\"\r\n        },\r\n        background: {\r\n            paper: \"#E5E5E5\",\r\n            default: \"#242F40\"\r\n        },\r\n        text: {\r\n          primary: \"#242F40\"\r\n        },\r\n        divider: \"#242F40\"\r\n    },\r\n    overrides: {\r\n        MuiDivider: {\r\n            root: {\r\n                marginTop: 1 + \"em\",\r\n                marginBottom: 1 + \"em\"\r\n            }\r\n        }\r\n\r\n    }\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Router>\r\n            <MuiThemeProvider theme={ theme }>\r\n                <CssBaseline/>\r\n                <NavBar/>\r\n                <div className={ \"main-body\" }>\r\n                    <Switch>\r\n                        <Route path={ \"/about\" }>\r\n                            <AboutMe/>\r\n                        </Route>\r\n                        <Route path={ \"/projects\" }>\r\n                            <Projects/>\r\n                        </Route>\r\n                        <Route exact path={ \"/\" }>\r\n                            <Homepage/>\r\n                        </Route>\r\n                        <Route>\r\n                            <b style={{fontSize: 2 + 'em'}}>Unknown page URL</b>\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </MuiThemeProvider>\r\n        </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}